// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_F140GENERAL_BRIGHTNESS_FLATBUFS_F140_GENERAL_H_
#define FLATBUFFERS_GENERATED_F140GENERAL_BRIGHTNESS_FLATBUFS_F140_GENERAL_H_

#include "flatbuffers/flatbuffers.h"

namespace BrightnESS {
namespace FlatBufs {
namespace f140_general {

struct pvByte;

struct pvUByte;

struct pvShort;

struct pvUShort;

struct pvInt;

struct pvUInt;

struct pvLong;

struct pvULong;

struct pvFloat;

struct pvDouble;

struct pvString;

struct pvByte_a;

struct pvShort_a;

struct pvInt_a;

struct pvLong_a;

struct pvUByte_a;

struct pvUShort_a;

struct pvUInt_a;

struct pvULong_a;

struct pvFloat_a;

struct pvDouble_a;

struct pvString_a;

struct ObjM;

struct Obj;

struct Obj_a;

struct fwdinfo_t;

struct PV;

enum class F : uint8_t {
  NONE = 0,
  pvByte = 1,
  pvShort = 2,
  pvInt = 3,
  pvLong = 4,
  pvUByte = 5,
  pvUShort = 6,
  pvUInt = 7,
  pvULong = 8,
  pvFloat = 9,
  pvDouble = 10,
  pvString = 11,
  pvByte_a = 12,
  pvShort_a = 13,
  pvInt_a = 14,
  pvLong_a = 15,
  pvUByte_a = 16,
  pvUShort_a = 17,
  pvUInt_a = 18,
  pvULong_a = 19,
  pvFloat_a = 20,
  pvDouble_a = 21,
  pvString_a = 22,
  Obj = 23,
  Obj_a = 24,
  MIN = NONE,
  MAX = Obj_a
};

inline const char **EnumNamesF() {
  static const char *names[] = {
    "NONE",
    "pvByte",
    "pvShort",
    "pvInt",
    "pvLong",
    "pvUByte",
    "pvUShort",
    "pvUInt",
    "pvULong",
    "pvFloat",
    "pvDouble",
    "pvString",
    "pvByte_a",
    "pvShort_a",
    "pvInt_a",
    "pvLong_a",
    "pvUByte_a",
    "pvUShort_a",
    "pvUInt_a",
    "pvULong_a",
    "pvFloat_a",
    "pvDouble_a",
    "pvString_a",
    "Obj",
    "Obj_a",
    nullptr
  };
  return names;
}

inline const char *EnumNameF(F e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesF()[index];
}

template<typename T> struct FTraits {
  static const F enum_value = F::NONE;
};

template<> struct FTraits<pvByte> {
  static const F enum_value = F::pvByte;
};

template<> struct FTraits<pvShort> {
  static const F enum_value = F::pvShort;
};

template<> struct FTraits<pvInt> {
  static const F enum_value = F::pvInt;
};

template<> struct FTraits<pvLong> {
  static const F enum_value = F::pvLong;
};

template<> struct FTraits<pvUByte> {
  static const F enum_value = F::pvUByte;
};

template<> struct FTraits<pvUShort> {
  static const F enum_value = F::pvUShort;
};

template<> struct FTraits<pvUInt> {
  static const F enum_value = F::pvUInt;
};

template<> struct FTraits<pvULong> {
  static const F enum_value = F::pvULong;
};

template<> struct FTraits<pvFloat> {
  static const F enum_value = F::pvFloat;
};

template<> struct FTraits<pvDouble> {
  static const F enum_value = F::pvDouble;
};

template<> struct FTraits<pvString> {
  static const F enum_value = F::pvString;
};

template<> struct FTraits<pvByte_a> {
  static const F enum_value = F::pvByte_a;
};

template<> struct FTraits<pvShort_a> {
  static const F enum_value = F::pvShort_a;
};

template<> struct FTraits<pvInt_a> {
  static const F enum_value = F::pvInt_a;
};

template<> struct FTraits<pvLong_a> {
  static const F enum_value = F::pvLong_a;
};

template<> struct FTraits<pvUByte_a> {
  static const F enum_value = F::pvUByte_a;
};

template<> struct FTraits<pvUShort_a> {
  static const F enum_value = F::pvUShort_a;
};

template<> struct FTraits<pvUInt_a> {
  static const F enum_value = F::pvUInt_a;
};

template<> struct FTraits<pvULong_a> {
  static const F enum_value = F::pvULong_a;
};

template<> struct FTraits<pvFloat_a> {
  static const F enum_value = F::pvFloat_a;
};

template<> struct FTraits<pvDouble_a> {
  static const F enum_value = F::pvDouble_a;
};

template<> struct FTraits<pvString_a> {
  static const F enum_value = F::pvString_a;
};

template<> struct FTraits<Obj> {
  static const F enum_value = F::Obj;
};

template<> struct FTraits<Obj_a> {
  static const F enum_value = F::Obj_a;
};

bool VerifyF(flatbuffers::Verifier &verifier, const void *obj, F type);
bool VerifyFVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

MANUALLY_ALIGNED_STRUCT(8) fwdinfo_t FLATBUFFERS_FINAL_CLASS {
 private:
  uint64_t seq_;
  uint64_t ts_data_;
  uint64_t ts_fwd_;
  uint8_t fwdix_;
  int8_t padding0__;  int16_t padding1__;  int32_t padding2__;

 public:
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.fwdinfo_t";
  }
  fwdinfo_t() {
    memset(this, 0, sizeof(fwdinfo_t));
  }
  fwdinfo_t(const fwdinfo_t &_o) {
    memcpy(this, &_o, sizeof(fwdinfo_t));
  }
  fwdinfo_t(uint64_t _seq, uint64_t _ts_data, uint64_t _ts_fwd, uint8_t _fwdix)
      : seq_(flatbuffers::EndianScalar(_seq)),
        ts_data_(flatbuffers::EndianScalar(_ts_data)),
        ts_fwd_(flatbuffers::EndianScalar(_ts_fwd)),
        fwdix_(flatbuffers::EndianScalar(_fwdix)),
        padding0__(0),
        padding1__(0),
        padding2__(0) {
    (void)padding0__;    (void)padding1__;    (void)padding2__;
  }
  uint64_t seq() const {
    return flatbuffers::EndianScalar(seq_);
  }
  void mutate_seq(uint64_t _seq) {
    flatbuffers::WriteScalar(&seq_, _seq);
  }
  uint64_t ts_data() const {
    return flatbuffers::EndianScalar(ts_data_);
  }
  void mutate_ts_data(uint64_t _ts_data) {
    flatbuffers::WriteScalar(&ts_data_, _ts_data);
  }
  uint64_t ts_fwd() const {
    return flatbuffers::EndianScalar(ts_fwd_);
  }
  void mutate_ts_fwd(uint64_t _ts_fwd) {
    flatbuffers::WriteScalar(&ts_fwd_, _ts_fwd);
  }
  uint8_t fwdix() const {
    return flatbuffers::EndianScalar(fwdix_);
  }
  void mutate_fwdix(uint8_t _fwdix) {
    flatbuffers::WriteScalar(&fwdix_, _fwdix);
  }
};
STRUCT_END(fwdinfo_t, 32);

struct pvByte FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.pvByte";
  }
  enum {
    VT_V = 4
  };
  int8_t v() const {
    return GetField<int8_t>(VT_V, 0);
  }
  bool mutate_v(int8_t _v) {
    return SetField(VT_V, _v);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_V) &&
           verifier.EndTable();
  }
};

struct pvByteBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_v(int8_t v) {
    fbb_.AddElement<int8_t>(pvByte::VT_V, v, 0);
  }
  pvByteBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  pvByteBuilder &operator=(const pvByteBuilder &);
  flatbuffers::Offset<pvByte> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<pvByte>(end);
    return o;
  }
};

inline flatbuffers::Offset<pvByte> CreatepvByte(
    flatbuffers::FlatBufferBuilder &_fbb,
    int8_t v = 0) {
  pvByteBuilder builder_(_fbb);
  builder_.add_v(v);
  return builder_.Finish();
}

struct pvUByte FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.pvUByte";
  }
  enum {
    VT_V = 4
  };
  uint8_t v() const {
    return GetField<uint8_t>(VT_V, 0);
  }
  bool mutate_v(uint8_t _v) {
    return SetField(VT_V, _v);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_V) &&
           verifier.EndTable();
  }
};

struct pvUByteBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_v(uint8_t v) {
    fbb_.AddElement<uint8_t>(pvUByte::VT_V, v, 0);
  }
  pvUByteBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  pvUByteBuilder &operator=(const pvUByteBuilder &);
  flatbuffers::Offset<pvUByte> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<pvUByte>(end);
    return o;
  }
};

inline flatbuffers::Offset<pvUByte> CreatepvUByte(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t v = 0) {
  pvUByteBuilder builder_(_fbb);
  builder_.add_v(v);
  return builder_.Finish();
}

struct pvShort FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.pvShort";
  }
  enum {
    VT_V = 4
  };
  int16_t v() const {
    return GetField<int16_t>(VT_V, 0);
  }
  bool mutate_v(int16_t _v) {
    return SetField(VT_V, _v);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_V) &&
           verifier.EndTable();
  }
};

struct pvShortBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_v(int16_t v) {
    fbb_.AddElement<int16_t>(pvShort::VT_V, v, 0);
  }
  pvShortBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  pvShortBuilder &operator=(const pvShortBuilder &);
  flatbuffers::Offset<pvShort> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<pvShort>(end);
    return o;
  }
};

inline flatbuffers::Offset<pvShort> CreatepvShort(
    flatbuffers::FlatBufferBuilder &_fbb,
    int16_t v = 0) {
  pvShortBuilder builder_(_fbb);
  builder_.add_v(v);
  return builder_.Finish();
}

struct pvUShort FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.pvUShort";
  }
  enum {
    VT_V = 4
  };
  uint16_t v() const {
    return GetField<uint16_t>(VT_V, 0);
  }
  bool mutate_v(uint16_t _v) {
    return SetField(VT_V, _v);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_V) &&
           verifier.EndTable();
  }
};

struct pvUShortBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_v(uint16_t v) {
    fbb_.AddElement<uint16_t>(pvUShort::VT_V, v, 0);
  }
  pvUShortBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  pvUShortBuilder &operator=(const pvUShortBuilder &);
  flatbuffers::Offset<pvUShort> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<pvUShort>(end);
    return o;
  }
};

inline flatbuffers::Offset<pvUShort> CreatepvUShort(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t v = 0) {
  pvUShortBuilder builder_(_fbb);
  builder_.add_v(v);
  return builder_.Finish();
}

struct pvInt FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.pvInt";
  }
  enum {
    VT_V = 4
  };
  int32_t v() const {
    return GetField<int32_t>(VT_V, 0);
  }
  bool mutate_v(int32_t _v) {
    return SetField(VT_V, _v);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_V) &&
           verifier.EndTable();
  }
};

struct pvIntBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_v(int32_t v) {
    fbb_.AddElement<int32_t>(pvInt::VT_V, v, 0);
  }
  pvIntBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  pvIntBuilder &operator=(const pvIntBuilder &);
  flatbuffers::Offset<pvInt> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<pvInt>(end);
    return o;
  }
};

inline flatbuffers::Offset<pvInt> CreatepvInt(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t v = 0) {
  pvIntBuilder builder_(_fbb);
  builder_.add_v(v);
  return builder_.Finish();
}

struct pvUInt FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.pvUInt";
  }
  enum {
    VT_V = 4
  };
  uint32_t v() const {
    return GetField<uint32_t>(VT_V, 0);
  }
  bool mutate_v(uint32_t _v) {
    return SetField(VT_V, _v);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_V) &&
           verifier.EndTable();
  }
};

struct pvUIntBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_v(uint32_t v) {
    fbb_.AddElement<uint32_t>(pvUInt::VT_V, v, 0);
  }
  pvUIntBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  pvUIntBuilder &operator=(const pvUIntBuilder &);
  flatbuffers::Offset<pvUInt> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<pvUInt>(end);
    return o;
  }
};

inline flatbuffers::Offset<pvUInt> CreatepvUInt(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t v = 0) {
  pvUIntBuilder builder_(_fbb);
  builder_.add_v(v);
  return builder_.Finish();
}

struct pvLong FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.pvLong";
  }
  enum {
    VT_V = 4
  };
  int64_t v() const {
    return GetField<int64_t>(VT_V, 0);
  }
  bool mutate_v(int64_t _v) {
    return SetField(VT_V, _v);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_V) &&
           verifier.EndTable();
  }
};

struct pvLongBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_v(int64_t v) {
    fbb_.AddElement<int64_t>(pvLong::VT_V, v, 0);
  }
  pvLongBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  pvLongBuilder &operator=(const pvLongBuilder &);
  flatbuffers::Offset<pvLong> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<pvLong>(end);
    return o;
  }
};

inline flatbuffers::Offset<pvLong> CreatepvLong(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t v = 0) {
  pvLongBuilder builder_(_fbb);
  builder_.add_v(v);
  return builder_.Finish();
}

struct pvULong FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.pvULong";
  }
  enum {
    VT_V = 4
  };
  uint64_t v() const {
    return GetField<uint64_t>(VT_V, 0);
  }
  bool mutate_v(uint64_t _v) {
    return SetField(VT_V, _v);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_V) &&
           verifier.EndTable();
  }
};

struct pvULongBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_v(uint64_t v) {
    fbb_.AddElement<uint64_t>(pvULong::VT_V, v, 0);
  }
  pvULongBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  pvULongBuilder &operator=(const pvULongBuilder &);
  flatbuffers::Offset<pvULong> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<pvULong>(end);
    return o;
  }
};

inline flatbuffers::Offset<pvULong> CreatepvULong(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t v = 0) {
  pvULongBuilder builder_(_fbb);
  builder_.add_v(v);
  return builder_.Finish();
}

struct pvFloat FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.pvFloat";
  }
  enum {
    VT_V = 4
  };
  float v() const {
    return GetField<float>(VT_V, 0.0f);
  }
  bool mutate_v(float _v) {
    return SetField(VT_V, _v);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_V) &&
           verifier.EndTable();
  }
};

struct pvFloatBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_v(float v) {
    fbb_.AddElement<float>(pvFloat::VT_V, v, 0.0f);
  }
  pvFloatBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  pvFloatBuilder &operator=(const pvFloatBuilder &);
  flatbuffers::Offset<pvFloat> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<pvFloat>(end);
    return o;
  }
};

inline flatbuffers::Offset<pvFloat> CreatepvFloat(
    flatbuffers::FlatBufferBuilder &_fbb,
    float v = 0.0f) {
  pvFloatBuilder builder_(_fbb);
  builder_.add_v(v);
  return builder_.Finish();
}

struct pvDouble FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.pvDouble";
  }
  enum {
    VT_V = 4
  };
  double v() const {
    return GetField<double>(VT_V, 0.0);
  }
  bool mutate_v(double _v) {
    return SetField(VT_V, _v);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<double>(verifier, VT_V) &&
           verifier.EndTable();
  }
};

struct pvDoubleBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_v(double v) {
    fbb_.AddElement<double>(pvDouble::VT_V, v, 0.0);
  }
  pvDoubleBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  pvDoubleBuilder &operator=(const pvDoubleBuilder &);
  flatbuffers::Offset<pvDouble> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<pvDouble>(end);
    return o;
  }
};

inline flatbuffers::Offset<pvDouble> CreatepvDouble(
    flatbuffers::FlatBufferBuilder &_fbb,
    double v = 0.0) {
  pvDoubleBuilder builder_(_fbb);
  builder_.add_v(v);
  return builder_.Finish();
}

struct pvString FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.pvString";
  }
  enum {
    VT_V = 4
  };
  const flatbuffers::String *v() const {
    return GetPointer<const flatbuffers::String *>(VT_V);
  }
  flatbuffers::String *mutable_v() {
    return GetPointer<flatbuffers::String *>(VT_V);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_V) &&
           verifier.Verify(v()) &&
           verifier.EndTable();
  }
};

struct pvStringBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_v(flatbuffers::Offset<flatbuffers::String> v) {
    fbb_.AddOffset(pvString::VT_V, v);
  }
  pvStringBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  pvStringBuilder &operator=(const pvStringBuilder &);
  flatbuffers::Offset<pvString> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<pvString>(end);
    return o;
  }
};

inline flatbuffers::Offset<pvString> CreatepvString(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> v = 0) {
  pvStringBuilder builder_(_fbb);
  builder_.add_v(v);
  return builder_.Finish();
}

inline flatbuffers::Offset<pvString> CreatepvStringDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *v = nullptr) {
  return BrightnESS::FlatBufs::f140_general::CreatepvString(
      _fbb,
      v ? _fbb.CreateString(v) : 0);
}

struct pvByte_a FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.pvByte_a";
  }
  enum {
    VT_V = 4
  };
  const flatbuffers::Vector<int8_t> *v() const {
    return GetPointer<const flatbuffers::Vector<int8_t> *>(VT_V);
  }
  flatbuffers::Vector<int8_t> *mutable_v() {
    return GetPointer<flatbuffers::Vector<int8_t> *>(VT_V);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_V) &&
           verifier.Verify(v()) &&
           verifier.EndTable();
  }
};

struct pvByte_aBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_v(flatbuffers::Offset<flatbuffers::Vector<int8_t>> v) {
    fbb_.AddOffset(pvByte_a::VT_V, v);
  }
  pvByte_aBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  pvByte_aBuilder &operator=(const pvByte_aBuilder &);
  flatbuffers::Offset<pvByte_a> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<pvByte_a>(end);
    return o;
  }
};

inline flatbuffers::Offset<pvByte_a> CreatepvByte_a(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<int8_t>> v = 0) {
  pvByte_aBuilder builder_(_fbb);
  builder_.add_v(v);
  return builder_.Finish();
}

inline flatbuffers::Offset<pvByte_a> CreatepvByte_aDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int8_t> *v = nullptr) {
  return BrightnESS::FlatBufs::f140_general::CreatepvByte_a(
      _fbb,
      v ? _fbb.CreateVector<int8_t>(*v) : 0);
}

struct pvShort_a FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.pvShort_a";
  }
  enum {
    VT_V = 4
  };
  const flatbuffers::Vector<int16_t> *v() const {
    return GetPointer<const flatbuffers::Vector<int16_t> *>(VT_V);
  }
  flatbuffers::Vector<int16_t> *mutable_v() {
    return GetPointer<flatbuffers::Vector<int16_t> *>(VT_V);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_V) &&
           verifier.Verify(v()) &&
           verifier.EndTable();
  }
};

struct pvShort_aBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_v(flatbuffers::Offset<flatbuffers::Vector<int16_t>> v) {
    fbb_.AddOffset(pvShort_a::VT_V, v);
  }
  pvShort_aBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  pvShort_aBuilder &operator=(const pvShort_aBuilder &);
  flatbuffers::Offset<pvShort_a> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<pvShort_a>(end);
    return o;
  }
};

inline flatbuffers::Offset<pvShort_a> CreatepvShort_a(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<int16_t>> v = 0) {
  pvShort_aBuilder builder_(_fbb);
  builder_.add_v(v);
  return builder_.Finish();
}

inline flatbuffers::Offset<pvShort_a> CreatepvShort_aDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int16_t> *v = nullptr) {
  return BrightnESS::FlatBufs::f140_general::CreatepvShort_a(
      _fbb,
      v ? _fbb.CreateVector<int16_t>(*v) : 0);
}

struct pvInt_a FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.pvInt_a";
  }
  enum {
    VT_V = 4
  };
  const flatbuffers::Vector<int32_t> *v() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_V);
  }
  flatbuffers::Vector<int32_t> *mutable_v() {
    return GetPointer<flatbuffers::Vector<int32_t> *>(VT_V);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_V) &&
           verifier.Verify(v()) &&
           verifier.EndTable();
  }
};

struct pvInt_aBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_v(flatbuffers::Offset<flatbuffers::Vector<int32_t>> v) {
    fbb_.AddOffset(pvInt_a::VT_V, v);
  }
  pvInt_aBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  pvInt_aBuilder &operator=(const pvInt_aBuilder &);
  flatbuffers::Offset<pvInt_a> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<pvInt_a>(end);
    return o;
  }
};

inline flatbuffers::Offset<pvInt_a> CreatepvInt_a(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> v = 0) {
  pvInt_aBuilder builder_(_fbb);
  builder_.add_v(v);
  return builder_.Finish();
}

inline flatbuffers::Offset<pvInt_a> CreatepvInt_aDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int32_t> *v = nullptr) {
  return BrightnESS::FlatBufs::f140_general::CreatepvInt_a(
      _fbb,
      v ? _fbb.CreateVector<int32_t>(*v) : 0);
}

struct pvLong_a FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.pvLong_a";
  }
  enum {
    VT_V = 4
  };
  const flatbuffers::Vector<int64_t> *v() const {
    return GetPointer<const flatbuffers::Vector<int64_t> *>(VT_V);
  }
  flatbuffers::Vector<int64_t> *mutable_v() {
    return GetPointer<flatbuffers::Vector<int64_t> *>(VT_V);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_V) &&
           verifier.Verify(v()) &&
           verifier.EndTable();
  }
};

struct pvLong_aBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_v(flatbuffers::Offset<flatbuffers::Vector<int64_t>> v) {
    fbb_.AddOffset(pvLong_a::VT_V, v);
  }
  pvLong_aBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  pvLong_aBuilder &operator=(const pvLong_aBuilder &);
  flatbuffers::Offset<pvLong_a> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<pvLong_a>(end);
    return o;
  }
};

inline flatbuffers::Offset<pvLong_a> CreatepvLong_a(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<int64_t>> v = 0) {
  pvLong_aBuilder builder_(_fbb);
  builder_.add_v(v);
  return builder_.Finish();
}

inline flatbuffers::Offset<pvLong_a> CreatepvLong_aDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int64_t> *v = nullptr) {
  return BrightnESS::FlatBufs::f140_general::CreatepvLong_a(
      _fbb,
      v ? _fbb.CreateVector<int64_t>(*v) : 0);
}

struct pvUByte_a FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.pvUByte_a";
  }
  enum {
    VT_V = 4
  };
  const flatbuffers::Vector<uint8_t> *v() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_V);
  }
  flatbuffers::Vector<uint8_t> *mutable_v() {
    return GetPointer<flatbuffers::Vector<uint8_t> *>(VT_V);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_V) &&
           verifier.Verify(v()) &&
           verifier.EndTable();
  }
};

struct pvUByte_aBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_v(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> v) {
    fbb_.AddOffset(pvUByte_a::VT_V, v);
  }
  pvUByte_aBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  pvUByte_aBuilder &operator=(const pvUByte_aBuilder &);
  flatbuffers::Offset<pvUByte_a> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<pvUByte_a>(end);
    return o;
  }
};

inline flatbuffers::Offset<pvUByte_a> CreatepvUByte_a(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> v = 0) {
  pvUByte_aBuilder builder_(_fbb);
  builder_.add_v(v);
  return builder_.Finish();
}

inline flatbuffers::Offset<pvUByte_a> CreatepvUByte_aDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *v = nullptr) {
  return BrightnESS::FlatBufs::f140_general::CreatepvUByte_a(
      _fbb,
      v ? _fbb.CreateVector<uint8_t>(*v) : 0);
}

struct pvUShort_a FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.pvUShort_a";
  }
  enum {
    VT_V = 4
  };
  const flatbuffers::Vector<uint16_t> *v() const {
    return GetPointer<const flatbuffers::Vector<uint16_t> *>(VT_V);
  }
  flatbuffers::Vector<uint16_t> *mutable_v() {
    return GetPointer<flatbuffers::Vector<uint16_t> *>(VT_V);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_V) &&
           verifier.Verify(v()) &&
           verifier.EndTable();
  }
};

struct pvUShort_aBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_v(flatbuffers::Offset<flatbuffers::Vector<uint16_t>> v) {
    fbb_.AddOffset(pvUShort_a::VT_V, v);
  }
  pvUShort_aBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  pvUShort_aBuilder &operator=(const pvUShort_aBuilder &);
  flatbuffers::Offset<pvUShort_a> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<pvUShort_a>(end);
    return o;
  }
};

inline flatbuffers::Offset<pvUShort_a> CreatepvUShort_a(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint16_t>> v = 0) {
  pvUShort_aBuilder builder_(_fbb);
  builder_.add_v(v);
  return builder_.Finish();
}

inline flatbuffers::Offset<pvUShort_a> CreatepvUShort_aDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint16_t> *v = nullptr) {
  return BrightnESS::FlatBufs::f140_general::CreatepvUShort_a(
      _fbb,
      v ? _fbb.CreateVector<uint16_t>(*v) : 0);
}

struct pvUInt_a FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.pvUInt_a";
  }
  enum {
    VT_V = 4
  };
  const flatbuffers::Vector<uint32_t> *v() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_V);
  }
  flatbuffers::Vector<uint32_t> *mutable_v() {
    return GetPointer<flatbuffers::Vector<uint32_t> *>(VT_V);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_V) &&
           verifier.Verify(v()) &&
           verifier.EndTable();
  }
};

struct pvUInt_aBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_v(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> v) {
    fbb_.AddOffset(pvUInt_a::VT_V, v);
  }
  pvUInt_aBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  pvUInt_aBuilder &operator=(const pvUInt_aBuilder &);
  flatbuffers::Offset<pvUInt_a> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<pvUInt_a>(end);
    return o;
  }
};

inline flatbuffers::Offset<pvUInt_a> CreatepvUInt_a(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> v = 0) {
  pvUInt_aBuilder builder_(_fbb);
  builder_.add_v(v);
  return builder_.Finish();
}

inline flatbuffers::Offset<pvUInt_a> CreatepvUInt_aDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint32_t> *v = nullptr) {
  return BrightnESS::FlatBufs::f140_general::CreatepvUInt_a(
      _fbb,
      v ? _fbb.CreateVector<uint32_t>(*v) : 0);
}

struct pvULong_a FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.pvULong_a";
  }
  enum {
    VT_V = 4
  };
  const flatbuffers::Vector<uint64_t> *v() const {
    return GetPointer<const flatbuffers::Vector<uint64_t> *>(VT_V);
  }
  flatbuffers::Vector<uint64_t> *mutable_v() {
    return GetPointer<flatbuffers::Vector<uint64_t> *>(VT_V);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_V) &&
           verifier.Verify(v()) &&
           verifier.EndTable();
  }
};

struct pvULong_aBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_v(flatbuffers::Offset<flatbuffers::Vector<uint64_t>> v) {
    fbb_.AddOffset(pvULong_a::VT_V, v);
  }
  pvULong_aBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  pvULong_aBuilder &operator=(const pvULong_aBuilder &);
  flatbuffers::Offset<pvULong_a> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<pvULong_a>(end);
    return o;
  }
};

inline flatbuffers::Offset<pvULong_a> CreatepvULong_a(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint64_t>> v = 0) {
  pvULong_aBuilder builder_(_fbb);
  builder_.add_v(v);
  return builder_.Finish();
}

inline flatbuffers::Offset<pvULong_a> CreatepvULong_aDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint64_t> *v = nullptr) {
  return BrightnESS::FlatBufs::f140_general::CreatepvULong_a(
      _fbb,
      v ? _fbb.CreateVector<uint64_t>(*v) : 0);
}

struct pvFloat_a FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.pvFloat_a";
  }
  enum {
    VT_V = 4
  };
  const flatbuffers::Vector<float> *v() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_V);
  }
  flatbuffers::Vector<float> *mutable_v() {
    return GetPointer<flatbuffers::Vector<float> *>(VT_V);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_V) &&
           verifier.Verify(v()) &&
           verifier.EndTable();
  }
};

struct pvFloat_aBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_v(flatbuffers::Offset<flatbuffers::Vector<float>> v) {
    fbb_.AddOffset(pvFloat_a::VT_V, v);
  }
  pvFloat_aBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  pvFloat_aBuilder &operator=(const pvFloat_aBuilder &);
  flatbuffers::Offset<pvFloat_a> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<pvFloat_a>(end);
    return o;
  }
};

inline flatbuffers::Offset<pvFloat_a> CreatepvFloat_a(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<float>> v = 0) {
  pvFloat_aBuilder builder_(_fbb);
  builder_.add_v(v);
  return builder_.Finish();
}

inline flatbuffers::Offset<pvFloat_a> CreatepvFloat_aDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<float> *v = nullptr) {
  return BrightnESS::FlatBufs::f140_general::CreatepvFloat_a(
      _fbb,
      v ? _fbb.CreateVector<float>(*v) : 0);
}

struct pvDouble_a FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.pvDouble_a";
  }
  enum {
    VT_V = 4
  };
  const flatbuffers::Vector<double> *v() const {
    return GetPointer<const flatbuffers::Vector<double> *>(VT_V);
  }
  flatbuffers::Vector<double> *mutable_v() {
    return GetPointer<flatbuffers::Vector<double> *>(VT_V);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_V) &&
           verifier.Verify(v()) &&
           verifier.EndTable();
  }
};

struct pvDouble_aBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_v(flatbuffers::Offset<flatbuffers::Vector<double>> v) {
    fbb_.AddOffset(pvDouble_a::VT_V, v);
  }
  pvDouble_aBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  pvDouble_aBuilder &operator=(const pvDouble_aBuilder &);
  flatbuffers::Offset<pvDouble_a> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<pvDouble_a>(end);
    return o;
  }
};

inline flatbuffers::Offset<pvDouble_a> CreatepvDouble_a(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<double>> v = 0) {
  pvDouble_aBuilder builder_(_fbb);
  builder_.add_v(v);
  return builder_.Finish();
}

inline flatbuffers::Offset<pvDouble_a> CreatepvDouble_aDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<double> *v = nullptr) {
  return BrightnESS::FlatBufs::f140_general::CreatepvDouble_a(
      _fbb,
      v ? _fbb.CreateVector<double>(*v) : 0);
}

struct pvString_a FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.pvString_a";
  }
  enum {
    VT_V = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *v() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_V);
  }
  flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *mutable_v() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_V);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_V) &&
           verifier.Verify(v()) &&
           verifier.VerifyVectorOfStrings(v()) &&
           verifier.EndTable();
  }
};

struct pvString_aBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_v(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> v) {
    fbb_.AddOffset(pvString_a::VT_V, v);
  }
  pvString_aBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  pvString_aBuilder &operator=(const pvString_aBuilder &);
  flatbuffers::Offset<pvString_a> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<pvString_a>(end);
    return o;
  }
};

inline flatbuffers::Offset<pvString_a> CreatepvString_a(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> v = 0) {
  pvString_aBuilder builder_(_fbb);
  builder_.add_v(v);
  return builder_.Finish();
}

inline flatbuffers::Offset<pvString_a> CreatepvString_aDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *v = nullptr) {
  return BrightnESS::FlatBufs::f140_general::CreatepvString_a(
      _fbb,
      v ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*v) : 0);
}

struct ObjM FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.ObjM";
  }
  enum {
    VT_K = 4,
    VT_V_TYPE = 6,
    VT_V = 8
  };
  const flatbuffers::String *k() const {
    return GetPointer<const flatbuffers::String *>(VT_K);
  }
  flatbuffers::String *mutable_k() {
    return GetPointer<flatbuffers::String *>(VT_K);
  }
  F v_type() const {
    return static_cast<F>(GetField<uint8_t>(VT_V_TYPE, 0));
  }
  bool mutate_v_type(F _v_type) {
    return SetField(VT_V_TYPE, static_cast<uint8_t>(_v_type));
  }
  const void *v() const {
    return GetPointer<const void *>(VT_V);
  }
  void *mutable_v() {
    return GetPointer<void *>(VT_V);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_K) &&
           verifier.Verify(k()) &&
           VerifyField<uint8_t>(verifier, VT_V_TYPE) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_V) &&
           VerifyF(verifier, v(), v_type()) &&
           verifier.EndTable();
  }
};

struct ObjMBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_k(flatbuffers::Offset<flatbuffers::String> k) {
    fbb_.AddOffset(ObjM::VT_K, k);
  }
  void add_v_type(F v_type) {
    fbb_.AddElement<uint8_t>(ObjM::VT_V_TYPE, static_cast<uint8_t>(v_type), 0);
  }
  void add_v(flatbuffers::Offset<void> v) {
    fbb_.AddOffset(ObjM::VT_V, v);
  }
  ObjMBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ObjMBuilder &operator=(const ObjMBuilder &);
  flatbuffers::Offset<ObjM> Finish() {
    const auto end = fbb_.EndTable(start_, 3);
    auto o = flatbuffers::Offset<ObjM>(end);
    return o;
  }
};

inline flatbuffers::Offset<ObjM> CreateObjM(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> k = 0,
    F v_type = F::NONE,
    flatbuffers::Offset<void> v = 0) {
  ObjMBuilder builder_(_fbb);
  builder_.add_v(v);
  builder_.add_k(k);
  builder_.add_v_type(v_type);
  return builder_.Finish();
}

inline flatbuffers::Offset<ObjM> CreateObjMDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *k = nullptr,
    F v_type = F::NONE,
    flatbuffers::Offset<void> v = 0) {
  return BrightnESS::FlatBufs::f140_general::CreateObjM(
      _fbb,
      k ? _fbb.CreateString(k) : 0,
      v_type,
      v);
}

struct Obj FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.Obj";
  }
  enum {
    VT_MS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<ObjM>> *ms() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ObjM>> *>(VT_MS);
  }
  flatbuffers::Vector<flatbuffers::Offset<ObjM>> *mutable_ms() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<ObjM>> *>(VT_MS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_MS) &&
           verifier.Verify(ms()) &&
           verifier.VerifyVectorOfTables(ms()) &&
           verifier.EndTable();
  }
};

struct ObjBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_ms(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ObjM>>> ms) {
    fbb_.AddOffset(Obj::VT_MS, ms);
  }
  ObjBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ObjBuilder &operator=(const ObjBuilder &);
  flatbuffers::Offset<Obj> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<Obj>(end);
    return o;
  }
};

inline flatbuffers::Offset<Obj> CreateObj(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ObjM>>> ms = 0) {
  ObjBuilder builder_(_fbb);
  builder_.add_ms(ms);
  return builder_.Finish();
}

inline flatbuffers::Offset<Obj> CreateObjDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<ObjM>> *ms = nullptr) {
  return BrightnESS::FlatBufs::f140_general::CreateObj(
      _fbb,
      ms ? _fbb.CreateVector<flatbuffers::Offset<ObjM>>(*ms) : 0);
}

struct Obj_a FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.Obj_a";
  }
  enum {
    VT_V = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<Obj>> *v() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Obj>> *>(VT_V);
  }
  flatbuffers::Vector<flatbuffers::Offset<Obj>> *mutable_v() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<Obj>> *>(VT_V);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_V) &&
           verifier.Verify(v()) &&
           verifier.VerifyVectorOfTables(v()) &&
           verifier.EndTable();
  }
};

struct Obj_aBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_v(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Obj>>> v) {
    fbb_.AddOffset(Obj_a::VT_V, v);
  }
  Obj_aBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  Obj_aBuilder &operator=(const Obj_aBuilder &);
  flatbuffers::Offset<Obj_a> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<Obj_a>(end);
    return o;
  }
};

inline flatbuffers::Offset<Obj_a> CreateObj_a(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Obj>>> v = 0) {
  Obj_aBuilder builder_(_fbb);
  builder_.add_v(v);
  return builder_.Finish();
}

inline flatbuffers::Offset<Obj_a> CreateObj_aDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<Obj>> *v = nullptr) {
  return BrightnESS::FlatBufs::f140_general::CreateObj_a(
      _fbb,
      v ? _fbb.CreateVector<flatbuffers::Offset<Obj>>(*v) : 0);
}

struct PV FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.PV";
  }
  enum {
    VT_N = 4,
    VT_V_TYPE = 6,
    VT_V = 8,
    VT_FWDINFO = 10
  };
  const flatbuffers::String *n() const {
    return GetPointer<const flatbuffers::String *>(VT_N);
  }
  flatbuffers::String *mutable_n() {
    return GetPointer<flatbuffers::String *>(VT_N);
  }
  F v_type() const {
    return static_cast<F>(GetField<uint8_t>(VT_V_TYPE, 0));
  }
  bool mutate_v_type(F _v_type) {
    return SetField(VT_V_TYPE, static_cast<uint8_t>(_v_type));
  }
  const void *v() const {
    return GetPointer<const void *>(VT_V);
  }
  void *mutable_v() {
    return GetPointer<void *>(VT_V);
  }
  const fwdinfo_t *fwdinfo() const {
    return GetStruct<const fwdinfo_t *>(VT_FWDINFO);
  }
  fwdinfo_t *mutable_fwdinfo() {
    return GetStruct<fwdinfo_t *>(VT_FWDINFO);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_N) &&
           verifier.Verify(n()) &&
           VerifyField<uint8_t>(verifier, VT_V_TYPE) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_V) &&
           VerifyF(verifier, v(), v_type()) &&
           VerifyField<fwdinfo_t>(verifier, VT_FWDINFO) &&
           verifier.EndTable();
  }
};

struct PVBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_n(flatbuffers::Offset<flatbuffers::String> n) {
    fbb_.AddOffset(PV::VT_N, n);
  }
  void add_v_type(F v_type) {
    fbb_.AddElement<uint8_t>(PV::VT_V_TYPE, static_cast<uint8_t>(v_type), 0);
  }
  void add_v(flatbuffers::Offset<void> v) {
    fbb_.AddOffset(PV::VT_V, v);
  }
  void add_fwdinfo(const fwdinfo_t *fwdinfo) {
    fbb_.AddStruct(PV::VT_FWDINFO, fwdinfo);
  }
  PVBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PVBuilder &operator=(const PVBuilder &);
  flatbuffers::Offset<PV> Finish() {
    const auto end = fbb_.EndTable(start_, 4);
    auto o = flatbuffers::Offset<PV>(end);
    return o;
  }
};

inline flatbuffers::Offset<PV> CreatePV(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> n = 0,
    F v_type = F::NONE,
    flatbuffers::Offset<void> v = 0,
    const fwdinfo_t *fwdinfo = 0) {
  PVBuilder builder_(_fbb);
  builder_.add_fwdinfo(fwdinfo);
  builder_.add_v(v);
  builder_.add_n(n);
  builder_.add_v_type(v_type);
  return builder_.Finish();
}

inline flatbuffers::Offset<PV> CreatePVDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *n = nullptr,
    F v_type = F::NONE,
    flatbuffers::Offset<void> v = 0,
    const fwdinfo_t *fwdinfo = 0) {
  return BrightnESS::FlatBufs::f140_general::CreatePV(
      _fbb,
      n ? _fbb.CreateString(n) : 0,
      v_type,
      v,
      fwdinfo);
}

inline bool VerifyF(flatbuffers::Verifier &verifier, const void *obj, F type) {
  switch (type) {
    case F::NONE: {
      return true;
    }
    case F::pvByte: {
      auto ptr = reinterpret_cast<const pvByte *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case F::pvShort: {
      auto ptr = reinterpret_cast<const pvShort *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case F::pvInt: {
      auto ptr = reinterpret_cast<const pvInt *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case F::pvLong: {
      auto ptr = reinterpret_cast<const pvLong *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case F::pvUByte: {
      auto ptr = reinterpret_cast<const pvUByte *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case F::pvUShort: {
      auto ptr = reinterpret_cast<const pvUShort *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case F::pvUInt: {
      auto ptr = reinterpret_cast<const pvUInt *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case F::pvULong: {
      auto ptr = reinterpret_cast<const pvULong *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case F::pvFloat: {
      auto ptr = reinterpret_cast<const pvFloat *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case F::pvDouble: {
      auto ptr = reinterpret_cast<const pvDouble *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case F::pvString: {
      auto ptr = reinterpret_cast<const pvString *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case F::pvByte_a: {
      auto ptr = reinterpret_cast<const pvByte_a *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case F::pvShort_a: {
      auto ptr = reinterpret_cast<const pvShort_a *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case F::pvInt_a: {
      auto ptr = reinterpret_cast<const pvInt_a *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case F::pvLong_a: {
      auto ptr = reinterpret_cast<const pvLong_a *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case F::pvUByte_a: {
      auto ptr = reinterpret_cast<const pvUByte_a *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case F::pvUShort_a: {
      auto ptr = reinterpret_cast<const pvUShort_a *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case F::pvUInt_a: {
      auto ptr = reinterpret_cast<const pvUInt_a *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case F::pvULong_a: {
      auto ptr = reinterpret_cast<const pvULong_a *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case F::pvFloat_a: {
      auto ptr = reinterpret_cast<const pvFloat_a *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case F::pvDouble_a: {
      auto ptr = reinterpret_cast<const pvDouble_a *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case F::pvString_a: {
      auto ptr = reinterpret_cast<const pvString_a *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case F::Obj: {
      auto ptr = reinterpret_cast<const Obj *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case F::Obj_a: {
      auto ptr = reinterpret_cast<const Obj_a *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifyFVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyF(
        verifier,  values->Get(i), types->GetEnum<F>(i))) {
      return false;
    }
  }
  return true;
}

inline const BrightnESS::FlatBufs::f140_general::PV *GetPV(const void *buf) {
  return flatbuffers::GetRoot<BrightnESS::FlatBufs::f140_general::PV>(buf);
}

inline PV *GetMutablePV(void *buf) {
  return flatbuffers::GetMutableRoot<PV>(buf);
}

inline const char *PVIdentifier() {
  return "f140";
}

inline bool PVBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, PVIdentifier());
}

inline bool VerifyPVBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<BrightnESS::FlatBufs::f140_general::PV>(PVIdentifier());
}

inline void FinishPVBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<BrightnESS::FlatBufs::f140_general::PV> root) {
  fbb.Finish(root, PVIdentifier());
}

}  // namespace f140_general
}  // namespace FlatBufs
}  // namespace BrightnESS

#endif  // FLATBUFFERS_GENERATED_F140GENERAL_BRIGHTNESS_FLATBUFS_F140_GENERAL_H_
